// tslint:disable
/**
 * lingxi
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface ChangePassword
 */
export interface ChangePassword {
    /**
     * 
     * @type {string}
     * @memberof ChangePassword
     */
    oldPassword: string;
    /**
     * 
     * @type {string}
     * @memberof ChangePassword
     */
    newPassword: string;
}
/**
 * 
 * @export
 * @interface ChangePasswordRequest
 */
export interface ChangePasswordRequest {
    /**
     * 
     * @type {string}
     * @memberof ChangePasswordRequest
     */
    oldPassword: string;
    /**
     * 
     * @type {string}
     * @memberof ChangePasswordRequest
     */
    newPassword: string;
}
/**
 * 
 * @export
 * @interface CreatePermissionRequest
 */
export interface CreatePermissionRequest {
    /**
     * 
     * @type {string}
     * @memberof CreatePermissionRequest
     */
    type: CreatePermissionRequestTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof CreatePermissionRequest
     */
    value: string;
}

/**
    * @export
    * @enum {string}
    */
export enum CreatePermissionRequestTypeEnum {
    API = 'API',
    MENU = 'MENU',
    CUSTOM = 'CUSTOM'
}

/**
 * 
 * @export
 * @interface CreateRoleRequest
 */
export interface CreateRoleRequest {
    /**
     * 
     * @type {string}
     * @memberof CreateRoleRequest
     */
    code: string;
    /**
     * 
     * @type {string}
     * @memberof CreateRoleRequest
     */
    name: string;
}
/**
 * 
 * @export
 * @interface CreateUserRequest
 */
export interface CreateUserRequest {
    /**
     * 
     * @type {string}
     * @memberof CreateUserRequest
     */
    username?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateUserRequest
     */
    password?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateUserRequest
     */
    avatar?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateUserRequest
     */
    nickName?: string;
}
/**
 * 
 * @export
 * @interface LoginRequest
 */
export interface LoginRequest {
    /**
     * 
     * @type {string}
     * @memberof LoginRequest
     */
    username: string;
    /**
     * 
     * @type {string}
     * @memberof LoginRequest
     */
    password: string;
}
/**
 * 
 * @export
 * @interface PagePermissionInfoResponse
 */
export interface PagePermissionInfoResponse {
    /**
     * 
     * @type {number}
     * @memberof PagePermissionInfoResponse
     */
    totalPages?: number;
    /**
     * 
     * @type {number}
     * @memberof PagePermissionInfoResponse
     */
    totalElements?: number;
    /**
     * 
     * @type {number}
     * @memberof PagePermissionInfoResponse
     */
    size?: number;
    /**
     * 
     * @type {Array<PermissionInfoResponse>}
     * @memberof PagePermissionInfoResponse
     */
    content?: Array<PermissionInfoResponse>;
    /**
     * 
     * @type {number}
     * @memberof PagePermissionInfoResponse
     */
    number?: number;
    /**
     * 
     * @type {Sort}
     * @memberof PagePermissionInfoResponse
     */
    sort?: Sort;
    /**
     * 
     * @type {PageableObject}
     * @memberof PagePermissionInfoResponse
     */
    pageable?: PageableObject;
    /**
     * 
     * @type {number}
     * @memberof PagePermissionInfoResponse
     */
    numberOfElements?: number;
    /**
     * 
     * @type {boolean}
     * @memberof PagePermissionInfoResponse
     */
    first?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PagePermissionInfoResponse
     */
    last?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PagePermissionInfoResponse
     */
    empty?: boolean;
}
/**
 * 
 * @export
 * @interface PageRoleInfoResponse
 */
export interface PageRoleInfoResponse {
    /**
     * 
     * @type {number}
     * @memberof PageRoleInfoResponse
     */
    totalPages?: number;
    /**
     * 
     * @type {number}
     * @memberof PageRoleInfoResponse
     */
    totalElements?: number;
    /**
     * 
     * @type {number}
     * @memberof PageRoleInfoResponse
     */
    size?: number;
    /**
     * 
     * @type {Array<RoleInfoResponse>}
     * @memberof PageRoleInfoResponse
     */
    content?: Array<RoleInfoResponse>;
    /**
     * 
     * @type {number}
     * @memberof PageRoleInfoResponse
     */
    number?: number;
    /**
     * 
     * @type {Sort}
     * @memberof PageRoleInfoResponse
     */
    sort?: Sort;
    /**
     * 
     * @type {PageableObject}
     * @memberof PageRoleInfoResponse
     */
    pageable?: PageableObject;
    /**
     * 
     * @type {number}
     * @memberof PageRoleInfoResponse
     */
    numberOfElements?: number;
    /**
     * 
     * @type {boolean}
     * @memberof PageRoleInfoResponse
     */
    first?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PageRoleInfoResponse
     */
    last?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PageRoleInfoResponse
     */
    empty?: boolean;
}
/**
 * 
 * @export
 * @interface PageUserListResponse
 */
export interface PageUserListResponse {
    /**
     * 
     * @type {number}
     * @memberof PageUserListResponse
     */
    totalPages?: number;
    /**
     * 
     * @type {number}
     * @memberof PageUserListResponse
     */
    totalElements?: number;
    /**
     * 
     * @type {number}
     * @memberof PageUserListResponse
     */
    size?: number;
    /**
     * 
     * @type {Array<UserListResponse>}
     * @memberof PageUserListResponse
     */
    content?: Array<UserListResponse>;
    /**
     * 
     * @type {number}
     * @memberof PageUserListResponse
     */
    number?: number;
    /**
     * 
     * @type {Sort}
     * @memberof PageUserListResponse
     */
    sort?: Sort;
    /**
     * 
     * @type {PageableObject}
     * @memberof PageUserListResponse
     */
    pageable?: PageableObject;
    /**
     * 
     * @type {number}
     * @memberof PageUserListResponse
     */
    numberOfElements?: number;
    /**
     * 
     * @type {boolean}
     * @memberof PageUserListResponse
     */
    first?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PageUserListResponse
     */
    last?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PageUserListResponse
     */
    empty?: boolean;
}
/**
 * 
 * @export
 * @interface Pageable
 */
export interface Pageable {
    /**
     * 
     * @type {number}
     * @memberof Pageable
     */
    page?: number;
    /**
     * 
     * @type {number}
     * @memberof Pageable
     */
    size?: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof Pageable
     */
    sort?: Array<string>;
}
/**
 * 
 * @export
 * @interface PageableObject
 */
export interface PageableObject {
    /**
     * 
     * @type {number}
     * @memberof PageableObject
     */
    offset?: number;
    /**
     * 
     * @type {Sort}
     * @memberof PageableObject
     */
    sort?: Sort;
    /**
     * 
     * @type {boolean}
     * @memberof PageableObject
     */
    paged?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PageableObject
     */
    unpaged?: boolean;
    /**
     * 
     * @type {number}
     * @memberof PageableObject
     */
    pageNumber?: number;
    /**
     * 
     * @type {number}
     * @memberof PageableObject
     */
    pageSize?: number;
}
/**
 * 权限
 * @export
 * @interface PermissionInfoResponse
 */
export interface PermissionInfoResponse {
    /**
     * 
     * @type {number}
     * @memberof PermissionInfoResponse
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof PermissionInfoResponse
     */
    type?: PermissionInfoResponseTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof PermissionInfoResponse
     */
    value?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum PermissionInfoResponseTypeEnum {
    API = 'API',
    MENU = 'MENU',
    CUSTOM = 'CUSTOM'
}

/**
 * 
 * @export
 * @interface RoleInfoResponse
 */
export interface RoleInfoResponse {
    /**
     * 
     * @type {number}
     * @memberof RoleInfoResponse
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof RoleInfoResponse
     */
    code?: string;
    /**
     * 
     * @type {string}
     * @memberof RoleInfoResponse
     */
    name?: string;
}
/**
 * 
 * @export
 * @interface Sort
 */
export interface Sort {
    /**
     * 
     * @type {boolean}
     * @memberof Sort
     */
    empty?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Sort
     */
    unsorted?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Sort
     */
    sorted?: boolean;
}
/**
 * 
 * @export
 * @interface UpdateCurrentUserInfoRequest
 */
export interface UpdateCurrentUserInfoRequest {
    /**
     * 
     * @type {string}
     * @memberof UpdateCurrentUserInfoRequest
     */
    nickName?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateCurrentUserInfoRequest
     */
    avatar?: string;
}
/**
 * 
 * @export
 * @interface UpdatePermissionRequest
 */
export interface UpdatePermissionRequest {
    /**
     * 
     * @type {number}
     * @memberof UpdatePermissionRequest
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof UpdatePermissionRequest
     */
    type: UpdatePermissionRequestTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof UpdatePermissionRequest
     */
    value: string;
}

/**
    * @export
    * @enum {string}
    */
export enum UpdatePermissionRequestTypeEnum {
    API = 'API',
    MENU = 'MENU',
    CUSTOM = 'CUSTOM'
}

/**
 * 
 * @export
 * @interface UpdatePermissionRoleRelationRequest
 */
export interface UpdatePermissionRoleRelationRequest {
    /**
     * 
     * @type {number}
     * @memberof UpdatePermissionRoleRelationRequest
     */
    permissionId: number;
    /**
     * 
     * @type {Array<number>}
     * @memberof UpdatePermissionRoleRelationRequest
     */
    roleIds: Array<number>;
}
/**
 * 
 * @export
 * @interface UpdateRolePermissionRelationRequest
 */
export interface UpdateRolePermissionRelationRequest {
    /**
     * 
     * @type {number}
     * @memberof UpdateRolePermissionRelationRequest
     */
    roleId: number;
    /**
     * 
     * @type {Array<number>}
     * @memberof UpdateRolePermissionRelationRequest
     */
    permissionIds: Array<number>;
}
/**
 * 
 * @export
 * @interface UpdateRoleRequest
 */
export interface UpdateRoleRequest {
    /**
     * 
     * @type {number}
     * @memberof UpdateRoleRequest
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof UpdateRoleRequest
     */
    code: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateRoleRequest
     */
    name: string;
}
/**
 * 
 * @export
 * @interface UpdateRoleUserRelationRequest
 */
export interface UpdateRoleUserRelationRequest {
    /**
     * 
     * @type {number}
     * @memberof UpdateRoleUserRelationRequest
     */
    roleId: number;
    /**
     * 
     * @type {Array<number>}
     * @memberof UpdateRoleUserRelationRequest
     */
    userIds: Array<number>;
}
/**
 * 
 * @export
 * @interface UpdateUserRoleRelationRequest
 */
export interface UpdateUserRoleRelationRequest {
    /**
     * 
     * @type {number}
     * @memberof UpdateUserRoleRelationRequest
     */
    userId: number;
    /**
     * 
     * @type {Array<number>}
     * @memberof UpdateUserRoleRelationRequest
     */
    roleIds: Array<number>;
}
/**
 * 
 * @export
 * @interface UserInfoResponse
 */
export interface UserInfoResponse {
    /**
     * 
     * @type {number}
     * @memberof UserInfoResponse
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof UserInfoResponse
     */
    username?: string;
    /**
     * 
     * @type {string}
     * @memberof UserInfoResponse
     */
    nickName?: string;
    /**
     * 
     * @type {string}
     * @memberof UserInfoResponse
     */
    avatar?: string;
    /**
     * 
     * @type {Array<RoleInfoResponse>}
     * @memberof UserInfoResponse
     */
    roles?: Array<RoleInfoResponse>;
    /**
     * 
     * @type {Array<PermissionInfoResponse>}
     * @memberof UserInfoResponse
     */
    permissions?: Array<PermissionInfoResponse>;
}
/**
 * 
 * @export
 * @interface UserListResponse
 */
export interface UserListResponse {
    /**
     * 
     * @type {number}
     * @memberof UserListResponse
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof UserListResponse
     */
    username?: string;
    /**
     * 
     * @type {string}
     * @memberof UserListResponse
     */
    nickName?: string;
    /**
     * 
     * @type {string}
     * @memberof UserListResponse
     */
    avatar?: string;
}
/**
 * 
 * @export
 * @interface XiangYingTongYongMoXing
 */
export interface XiangYingTongYongMoXing {
    /**
     * 
     * @type {number}
     * @memberof XiangYingTongYongMoXing
     */
    code: number;
    /**
     * 
     * @type {string}
     * @memberof XiangYingTongYongMoXing
     */
    data: string;
    /**
     * 
     * @type {string}
     * @memberof XiangYingTongYongMoXing
     */
    msg: string;
}

/**
 * AuthReadControllerApi - axios parameter creator
 * @export
 */
export const AuthReadControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary /admin/currentUserInfo
         * @param {string} [authorization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentUserInfo: async (authorization?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/admin/currentUserInfo`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary /admin/permissions
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {string} [sort] 
         * @param {string} [authorization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPermissionList: async (page?: number, size?: number, sort?: string, authorization?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/admin/permissions`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary /admin/permissionsByRole
         * @param {number} roleId 
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {string} [sort] 
         * @param {string} [authorization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPermissionListByRoleId: async (roleId: number, page?: number, size?: number, sort?: string, authorization?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'roleId' is not null or undefined
            if (roleId === null || roleId === undefined) {
                throw new RequiredError('roleId','Required parameter roleId was null or undefined when calling getPermissionListByRoleId.');
            }
            const localVarPath = `/admin/permissionsByRole`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (roleId !== undefined) {
                localVarQueryParameter['roleId'] = roleId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary /admin/roles
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {string} [sort] 
         * @param {string} [authorization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRoleList: async (page?: number, size?: number, sort?: string, authorization?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/admin/roles`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary /admin/rolesByPermission
         * @param {number} permissionId 
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {string} [sort] 
         * @param {string} [authorization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRoleListByPermissionId: async (permissionId: number, page?: number, size?: number, sort?: string, authorization?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'permissionId' is not null or undefined
            if (permissionId === null || permissionId === undefined) {
                throw new RequiredError('permissionId','Required parameter permissionId was null or undefined when calling getRoleListByPermissionId.');
            }
            const localVarPath = `/admin/rolesByPermission`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (permissionId !== undefined) {
                localVarQueryParameter['permissionId'] = permissionId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary /admin/rolesOfUser
         * @param {number} userId 
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {string} [sort] 
         * @param {string} [authorization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRoleListByUserId: async (userId: number, page?: number, size?: number, sort?: string, authorization?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling getRoleListByUserId.');
            }
            const localVarPath = `/admin/rolesOfUser`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary /admin/rolesByUser
         * @param {number} userId 
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {string} [sort] 
         * @param {string} [authorization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRoleListByUserId_1: async (userId: number, page?: number, size?: number, sort?: string, authorization?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling getRoleListByUserId_1.');
            }
            const localVarPath = `/admin/rolesByUser`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary /admin/users
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {string} [sort] 
         * @param {string} [authorization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserList: async (page?: number, size?: number, sort?: string, authorization?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/admin/users`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary /admin/usersByRole
         * @param {number} roleId 
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {string} [sort] 
         * @param {string} [authorization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserListByRoleId: async (roleId: number, page?: number, size?: number, sort?: string, authorization?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'roleId' is not null or undefined
            if (roleId === null || roleId === undefined) {
                throw new RequiredError('roleId','Required parameter roleId was null or undefined when calling getUserListByRoleId.');
            }
            const localVarPath = `/admin/usersByRole`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (roleId !== undefined) {
                localVarQueryParameter['roleId'] = roleId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthReadControllerApi - functional programming interface
 * @export
 */
export const AuthReadControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary /admin/currentUserInfo
         * @param {string} [authorization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCurrentUserInfo(authorization?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserInfoResponse>> {
            const localVarAxiosArgs = await AuthReadControllerApiAxiosParamCreator(configuration).getCurrentUserInfo(authorization, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary /admin/permissions
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {string} [sort] 
         * @param {string} [authorization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPermissionList(page?: number, size?: number, sort?: string, authorization?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagePermissionInfoResponse>> {
            const localVarAxiosArgs = await AuthReadControllerApiAxiosParamCreator(configuration).getPermissionList(page, size, sort, authorization, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary /admin/permissionsByRole
         * @param {number} roleId 
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {string} [sort] 
         * @param {string} [authorization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPermissionListByRoleId(roleId: number, page?: number, size?: number, sort?: string, authorization?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagePermissionInfoResponse>> {
            const localVarAxiosArgs = await AuthReadControllerApiAxiosParamCreator(configuration).getPermissionListByRoleId(roleId, page, size, sort, authorization, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary /admin/roles
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {string} [sort] 
         * @param {string} [authorization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRoleList(page?: number, size?: number, sort?: string, authorization?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageRoleInfoResponse>> {
            const localVarAxiosArgs = await AuthReadControllerApiAxiosParamCreator(configuration).getRoleList(page, size, sort, authorization, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary /admin/rolesByPermission
         * @param {number} permissionId 
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {string} [sort] 
         * @param {string} [authorization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRoleListByPermissionId(permissionId: number, page?: number, size?: number, sort?: string, authorization?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageRoleInfoResponse>> {
            const localVarAxiosArgs = await AuthReadControllerApiAxiosParamCreator(configuration).getRoleListByPermissionId(permissionId, page, size, sort, authorization, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary /admin/rolesOfUser
         * @param {number} userId 
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {string} [sort] 
         * @param {string} [authorization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRoleListByUserId(userId: number, page?: number, size?: number, sort?: string, authorization?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageRoleInfoResponse>> {
            const localVarAxiosArgs = await AuthReadControllerApiAxiosParamCreator(configuration).getRoleListByUserId(userId, page, size, sort, authorization, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary /admin/rolesByUser
         * @param {number} userId 
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {string} [sort] 
         * @param {string} [authorization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRoleListByUserId_1(userId: number, page?: number, size?: number, sort?: string, authorization?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageRoleInfoResponse>> {
            const localVarAxiosArgs = await AuthReadControllerApiAxiosParamCreator(configuration).getRoleListByUserId_1(userId, page, size, sort, authorization, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary /admin/users
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {string} [sort] 
         * @param {string} [authorization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserList(page?: number, size?: number, sort?: string, authorization?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageUserListResponse>> {
            const localVarAxiosArgs = await AuthReadControllerApiAxiosParamCreator(configuration).getUserList(page, size, sort, authorization, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary /admin/usersByRole
         * @param {number} roleId 
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {string} [sort] 
         * @param {string} [authorization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserListByRoleId(roleId: number, page?: number, size?: number, sort?: string, authorization?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageUserListResponse>> {
            const localVarAxiosArgs = await AuthReadControllerApiAxiosParamCreator(configuration).getUserListByRoleId(roleId, page, size, sort, authorization, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * AuthReadControllerApi - factory interface
 * @export
 */
export const AuthReadControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary /admin/currentUserInfo
         * @param {string} [authorization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentUserInfo(authorization?: string, options?: any): AxiosPromise<UserInfoResponse> {
            return AuthReadControllerApiFp(configuration).getCurrentUserInfo(authorization, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary /admin/permissions
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {string} [sort] 
         * @param {string} [authorization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPermissionList(page?: number, size?: number, sort?: string, authorization?: string, options?: any): AxiosPromise<PagePermissionInfoResponse> {
            return AuthReadControllerApiFp(configuration).getPermissionList(page, size, sort, authorization, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary /admin/permissionsByRole
         * @param {number} roleId 
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {string} [sort] 
         * @param {string} [authorization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPermissionListByRoleId(roleId: number, page?: number, size?: number, sort?: string, authorization?: string, options?: any): AxiosPromise<PagePermissionInfoResponse> {
            return AuthReadControllerApiFp(configuration).getPermissionListByRoleId(roleId, page, size, sort, authorization, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary /admin/roles
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {string} [sort] 
         * @param {string} [authorization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRoleList(page?: number, size?: number, sort?: string, authorization?: string, options?: any): AxiosPromise<PageRoleInfoResponse> {
            return AuthReadControllerApiFp(configuration).getRoleList(page, size, sort, authorization, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary /admin/rolesByPermission
         * @param {number} permissionId 
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {string} [sort] 
         * @param {string} [authorization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRoleListByPermissionId(permissionId: number, page?: number, size?: number, sort?: string, authorization?: string, options?: any): AxiosPromise<PageRoleInfoResponse> {
            return AuthReadControllerApiFp(configuration).getRoleListByPermissionId(permissionId, page, size, sort, authorization, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary /admin/rolesOfUser
         * @param {number} userId 
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {string} [sort] 
         * @param {string} [authorization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRoleListByUserId(userId: number, page?: number, size?: number, sort?: string, authorization?: string, options?: any): AxiosPromise<PageRoleInfoResponse> {
            return AuthReadControllerApiFp(configuration).getRoleListByUserId(userId, page, size, sort, authorization, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary /admin/rolesByUser
         * @param {number} userId 
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {string} [sort] 
         * @param {string} [authorization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRoleListByUserId_1(userId: number, page?: number, size?: number, sort?: string, authorization?: string, options?: any): AxiosPromise<PageRoleInfoResponse> {
            return AuthReadControllerApiFp(configuration).getRoleListByUserId_1(userId, page, size, sort, authorization, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary /admin/users
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {string} [sort] 
         * @param {string} [authorization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserList(page?: number, size?: number, sort?: string, authorization?: string, options?: any): AxiosPromise<PageUserListResponse> {
            return AuthReadControllerApiFp(configuration).getUserList(page, size, sort, authorization, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary /admin/usersByRole
         * @param {number} roleId 
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {string} [sort] 
         * @param {string} [authorization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserListByRoleId(roleId: number, page?: number, size?: number, sort?: string, authorization?: string, options?: any): AxiosPromise<PageUserListResponse> {
            return AuthReadControllerApiFp(configuration).getUserListByRoleId(roleId, page, size, sort, authorization, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthReadControllerApi - object-oriented interface
 * @export
 * @class AuthReadControllerApi
 * @extends {BaseAPI}
 */
export class AuthReadControllerApi extends BaseAPI {
    /**
     * 
     * @summary /admin/currentUserInfo
     * @param {string} [authorization] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthReadControllerApi
     */
    public getCurrentUserInfo(authorization?: string, options?: any) {
        return AuthReadControllerApiFp(this.configuration).getCurrentUserInfo(authorization, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary /admin/permissions
     * @param {number} [page] 
     * @param {number} [size] 
     * @param {string} [sort] 
     * @param {string} [authorization] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthReadControllerApi
     */
    public getPermissionList(page?: number, size?: number, sort?: string, authorization?: string, options?: any) {
        return AuthReadControllerApiFp(this.configuration).getPermissionList(page, size, sort, authorization, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary /admin/permissionsByRole
     * @param {number} roleId 
     * @param {number} [page] 
     * @param {number} [size] 
     * @param {string} [sort] 
     * @param {string} [authorization] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthReadControllerApi
     */
    public getPermissionListByRoleId(roleId: number, page?: number, size?: number, sort?: string, authorization?: string, options?: any) {
        return AuthReadControllerApiFp(this.configuration).getPermissionListByRoleId(roleId, page, size, sort, authorization, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary /admin/roles
     * @param {number} [page] 
     * @param {number} [size] 
     * @param {string} [sort] 
     * @param {string} [authorization] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthReadControllerApi
     */
    public getRoleList(page?: number, size?: number, sort?: string, authorization?: string, options?: any) {
        return AuthReadControllerApiFp(this.configuration).getRoleList(page, size, sort, authorization, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary /admin/rolesByPermission
     * @param {number} permissionId 
     * @param {number} [page] 
     * @param {number} [size] 
     * @param {string} [sort] 
     * @param {string} [authorization] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthReadControllerApi
     */
    public getRoleListByPermissionId(permissionId: number, page?: number, size?: number, sort?: string, authorization?: string, options?: any) {
        return AuthReadControllerApiFp(this.configuration).getRoleListByPermissionId(permissionId, page, size, sort, authorization, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary /admin/rolesOfUser
     * @param {number} userId 
     * @param {number} [page] 
     * @param {number} [size] 
     * @param {string} [sort] 
     * @param {string} [authorization] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthReadControllerApi
     */
    public getRoleListByUserId(userId: number, page?: number, size?: number, sort?: string, authorization?: string, options?: any) {
        return AuthReadControllerApiFp(this.configuration).getRoleListByUserId(userId, page, size, sort, authorization, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary /admin/rolesByUser
     * @param {number} userId 
     * @param {number} [page] 
     * @param {number} [size] 
     * @param {string} [sort] 
     * @param {string} [authorization] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthReadControllerApi
     */
    public getRoleListByUserId_1(userId: number, page?: number, size?: number, sort?: string, authorization?: string, options?: any) {
        return AuthReadControllerApiFp(this.configuration).getRoleListByUserId_1(userId, page, size, sort, authorization, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary /admin/users
     * @param {number} [page] 
     * @param {number} [size] 
     * @param {string} [sort] 
     * @param {string} [authorization] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthReadControllerApi
     */
    public getUserList(page?: number, size?: number, sort?: string, authorization?: string, options?: any) {
        return AuthReadControllerApiFp(this.configuration).getUserList(page, size, sort, authorization, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary /admin/usersByRole
     * @param {number} roleId 
     * @param {number} [page] 
     * @param {number} [size] 
     * @param {string} [sort] 
     * @param {string} [authorization] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthReadControllerApi
     */
    public getUserListByRoleId(roleId: number, page?: number, size?: number, sort?: string, authorization?: string, options?: any) {
        return AuthReadControllerApiFp(this.configuration).getUserListByRoleId(roleId, page, size, sort, authorization, options).then((request) => request(this.axios, this.basePath));
    }

}


/**
 * AuthWriteControllerApi - axios parameter creator
 * @export
 */
export const AuthWriteControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary /admin/user/changePassword
         * @param {string} [authorization] 
         * @param {ChangePassword} [changePassword] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changePassword: async (authorization?: string, changePassword?: ChangePassword, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/admin/user/changePassword`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof changePassword !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(changePassword !== undefined ? changePassword : {}) : (changePassword || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary /admin/permission/create
         * @param {string} [authorization] 
         * @param {CreatePermissionRequest} [createPermissionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPermission: async (authorization?: string, createPermissionRequest?: CreatePermissionRequest, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/admin/permission/create`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof createPermissionRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(createPermissionRequest !== undefined ? createPermissionRequest : {}) : (createPermissionRequest || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary /admin/role/create
         * @param {string} [authorization] 
         * @param {CreateRoleRequest} [createRoleRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRole: async (authorization?: string, createRoleRequest?: CreateRoleRequest, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/admin/role/create`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof createRoleRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(createRoleRequest !== undefined ? createRoleRequest : {}) : (createRoleRequest || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary /admin/user/create
         * @param {string} [authorization] 
         * @param {CreateUserRequest} [createUserRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUser: async (authorization?: string, createUserRequest?: CreateUserRequest, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/admin/user/create`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof createUserRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(createUserRequest !== undefined ? createUserRequest : {}) : (createUserRequest || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary /admin/role/delete
         * @param {number} roleId 
         * @param {string} [authorization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRole: async (roleId: number, authorization?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'roleId' is not null or undefined
            if (roleId === null || roleId === undefined) {
                throw new RequiredError('roleId','Required parameter roleId was null or undefined when calling deleteRole.');
            }
            const localVarPath = `/admin/role/delete`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (roleId !== undefined) {
                localVarQueryParameter['roleId'] = roleId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary /admin/login
         * @param {string} [authorization] 
         * @param {LoginRequest} [loginRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login: async (authorization?: string, loginRequest?: LoginRequest, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/admin/login`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof loginRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(loginRequest !== undefined ? loginRequest : {}) : (loginRequest || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary /admin/updateApiPermissions
         * @param {string} [authorization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateApiPermissions: async (authorization?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/admin/updateApiPermissions`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary /admin/user/updateCurrentUserInfo
         * @param {string} [authorization] 
         * @param {UpdateCurrentUserInfoRequest} [updateCurrentUserInfoRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCurrentUserInfo: async (authorization?: string, updateCurrentUserInfoRequest?: UpdateCurrentUserInfoRequest, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/admin/user/updateCurrentUserInfo`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof updateCurrentUserInfoRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(updateCurrentUserInfoRequest !== undefined ? updateCurrentUserInfoRequest : {}) : (updateCurrentUserInfoRequest || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary /admin/updateManuPermissions
         * @param {string} [authorization] 
         * @param {Array<string>} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateManuPermissions: async (authorization?: string, requestBody?: Array<string>, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/admin/updateManuPermissions`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof requestBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(requestBody !== undefined ? requestBody : {}) : (requestBody || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary /admin/permission/update
         * @param {string} [authorization] 
         * @param {UpdatePermissionRequest} [updatePermissionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePermission: async (authorization?: string, updatePermissionRequest?: UpdatePermissionRequest, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/admin/permission/update`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof updatePermissionRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(updatePermissionRequest !== undefined ? updatePermissionRequest : {}) : (updatePermissionRequest || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary /admin/user/updatePermissionRoleRelation
         * @param {string} [authorization] 
         * @param {UpdatePermissionRoleRelationRequest} [updatePermissionRoleRelationRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePermissionRoleRelation: async (authorization?: string, updatePermissionRoleRelationRequest?: UpdatePermissionRoleRelationRequest, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/admin/user/updatePermissionRoleRelation`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof updatePermissionRoleRelationRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(updatePermissionRoleRelationRequest !== undefined ? updatePermissionRoleRelationRequest : {}) : (updatePermissionRoleRelationRequest || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary /admin/role/update
         * @param {string} [authorization] 
         * @param {UpdateRoleRequest} [updateRoleRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRole: async (authorization?: string, updateRoleRequest?: UpdateRoleRequest, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/admin/role/update`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof updateRoleRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(updateRoleRequest !== undefined ? updateRoleRequest : {}) : (updateRoleRequest || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary /admin/user/updateRolePermissionRelation
         * @param {string} [authorization] 
         * @param {UpdateRolePermissionRelationRequest} [updateRolePermissionRelationRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRolePermissionRelation: async (authorization?: string, updateRolePermissionRelationRequest?: UpdateRolePermissionRelationRequest, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/admin/user/updateRolePermissionRelation`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof updateRolePermissionRelationRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(updateRolePermissionRelationRequest !== undefined ? updateRolePermissionRelationRequest : {}) : (updateRolePermissionRelationRequest || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary /admin/user/updateRoleUserRelation
         * @param {string} [authorization] 
         * @param {UpdateRoleUserRelationRequest} [updateRoleUserRelationRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRoleUserRelation: async (authorization?: string, updateRoleUserRelationRequest?: UpdateRoleUserRelationRequest, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/admin/user/updateRoleUserRelation`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof updateRoleUserRelationRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(updateRoleUserRelationRequest !== undefined ? updateRoleUserRelationRequest : {}) : (updateRoleUserRelationRequest || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary /admin/user/updateUserRoleRelation
         * @param {string} [authorization] 
         * @param {UpdateUserRoleRelationRequest} [updateUserRoleRelationRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserRoleRelation: async (authorization?: string, updateUserRoleRelationRequest?: UpdateUserRoleRelationRequest, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/admin/user/updateUserRoleRelation`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof updateUserRoleRelationRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(updateUserRoleRelationRequest !== undefined ? updateUserRoleRelationRequest : {}) : (updateUserRoleRelationRequest || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthWriteControllerApi - functional programming interface
 * @export
 */
export const AuthWriteControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary /admin/user/changePassword
         * @param {string} [authorization] 
         * @param {ChangePassword} [changePassword] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async changePassword(authorization?: string, changePassword?: ChangePassword, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await AuthWriteControllerApiAxiosParamCreator(configuration).changePassword(authorization, changePassword, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary /admin/permission/create
         * @param {string} [authorization] 
         * @param {CreatePermissionRequest} [createPermissionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPermission(authorization?: string, createPermissionRequest?: CreatePermissionRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await AuthWriteControllerApiAxiosParamCreator(configuration).createPermission(authorization, createPermissionRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary /admin/role/create
         * @param {string} [authorization] 
         * @param {CreateRoleRequest} [createRoleRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createRole(authorization?: string, createRoleRequest?: CreateRoleRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await AuthWriteControllerApiAxiosParamCreator(configuration).createRole(authorization, createRoleRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary /admin/user/create
         * @param {string} [authorization] 
         * @param {CreateUserRequest} [createUserRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createUser(authorization?: string, createUserRequest?: CreateUserRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await AuthWriteControllerApiAxiosParamCreator(configuration).createUser(authorization, createUserRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary /admin/role/delete
         * @param {number} roleId 
         * @param {string} [authorization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteRole(roleId: number, authorization?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await AuthWriteControllerApiAxiosParamCreator(configuration).deleteRole(roleId, authorization, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary /admin/login
         * @param {string} [authorization] 
         * @param {LoginRequest} [loginRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async login(authorization?: string, loginRequest?: LoginRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await AuthWriteControllerApiAxiosParamCreator(configuration).login(authorization, loginRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary /admin/updateApiPermissions
         * @param {string} [authorization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateApiPermissions(authorization?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await AuthWriteControllerApiAxiosParamCreator(configuration).updateApiPermissions(authorization, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary /admin/user/updateCurrentUserInfo
         * @param {string} [authorization] 
         * @param {UpdateCurrentUserInfoRequest} [updateCurrentUserInfoRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateCurrentUserInfo(authorization?: string, updateCurrentUserInfoRequest?: UpdateCurrentUserInfoRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await AuthWriteControllerApiAxiosParamCreator(configuration).updateCurrentUserInfo(authorization, updateCurrentUserInfoRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary /admin/updateManuPermissions
         * @param {string} [authorization] 
         * @param {Array<string>} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateManuPermissions(authorization?: string, requestBody?: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await AuthWriteControllerApiAxiosParamCreator(configuration).updateManuPermissions(authorization, requestBody, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary /admin/permission/update
         * @param {string} [authorization] 
         * @param {UpdatePermissionRequest} [updatePermissionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePermission(authorization?: string, updatePermissionRequest?: UpdatePermissionRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await AuthWriteControllerApiAxiosParamCreator(configuration).updatePermission(authorization, updatePermissionRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary /admin/user/updatePermissionRoleRelation
         * @param {string} [authorization] 
         * @param {UpdatePermissionRoleRelationRequest} [updatePermissionRoleRelationRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePermissionRoleRelation(authorization?: string, updatePermissionRoleRelationRequest?: UpdatePermissionRoleRelationRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await AuthWriteControllerApiAxiosParamCreator(configuration).updatePermissionRoleRelation(authorization, updatePermissionRoleRelationRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary /admin/role/update
         * @param {string} [authorization] 
         * @param {UpdateRoleRequest} [updateRoleRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateRole(authorization?: string, updateRoleRequest?: UpdateRoleRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await AuthWriteControllerApiAxiosParamCreator(configuration).updateRole(authorization, updateRoleRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary /admin/user/updateRolePermissionRelation
         * @param {string} [authorization] 
         * @param {UpdateRolePermissionRelationRequest} [updateRolePermissionRelationRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateRolePermissionRelation(authorization?: string, updateRolePermissionRelationRequest?: UpdateRolePermissionRelationRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await AuthWriteControllerApiAxiosParamCreator(configuration).updateRolePermissionRelation(authorization, updateRolePermissionRelationRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary /admin/user/updateRoleUserRelation
         * @param {string} [authorization] 
         * @param {UpdateRoleUserRelationRequest} [updateRoleUserRelationRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateRoleUserRelation(authorization?: string, updateRoleUserRelationRequest?: UpdateRoleUserRelationRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await AuthWriteControllerApiAxiosParamCreator(configuration).updateRoleUserRelation(authorization, updateRoleUserRelationRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary /admin/user/updateUserRoleRelation
         * @param {string} [authorization] 
         * @param {UpdateUserRoleRelationRequest} [updateUserRoleRelationRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUserRoleRelation(authorization?: string, updateUserRoleRelationRequest?: UpdateUserRoleRelationRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await AuthWriteControllerApiAxiosParamCreator(configuration).updateUserRoleRelation(authorization, updateUserRoleRelationRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * AuthWriteControllerApi - factory interface
 * @export
 */
export const AuthWriteControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary /admin/user/changePassword
         * @param {string} [authorization] 
         * @param {ChangePassword} [changePassword] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changePassword(authorization?: string, changePassword?: ChangePassword, options?: any): AxiosPromise<object> {
            return AuthWriteControllerApiFp(configuration).changePassword(authorization, changePassword, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary /admin/permission/create
         * @param {string} [authorization] 
         * @param {CreatePermissionRequest} [createPermissionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPermission(authorization?: string, createPermissionRequest?: CreatePermissionRequest, options?: any): AxiosPromise<number> {
            return AuthWriteControllerApiFp(configuration).createPermission(authorization, createPermissionRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary /admin/role/create
         * @param {string} [authorization] 
         * @param {CreateRoleRequest} [createRoleRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRole(authorization?: string, createRoleRequest?: CreateRoleRequest, options?: any): AxiosPromise<number> {
            return AuthWriteControllerApiFp(configuration).createRole(authorization, createRoleRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary /admin/user/create
         * @param {string} [authorization] 
         * @param {CreateUserRequest} [createUserRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUser(authorization?: string, createUserRequest?: CreateUserRequest, options?: any): AxiosPromise<object> {
            return AuthWriteControllerApiFp(configuration).createUser(authorization, createUserRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary /admin/role/delete
         * @param {number} roleId 
         * @param {string} [authorization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRole(roleId: number, authorization?: string, options?: any): AxiosPromise<object> {
            return AuthWriteControllerApiFp(configuration).deleteRole(roleId, authorization, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary /admin/login
         * @param {string} [authorization] 
         * @param {LoginRequest} [loginRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login(authorization?: string, loginRequest?: LoginRequest, options?: any): AxiosPromise<object> {
            return AuthWriteControllerApiFp(configuration).login(authorization, loginRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary /admin/updateApiPermissions
         * @param {string} [authorization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateApiPermissions(authorization?: string, options?: any): AxiosPromise<object> {
            return AuthWriteControllerApiFp(configuration).updateApiPermissions(authorization, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary /admin/user/updateCurrentUserInfo
         * @param {string} [authorization] 
         * @param {UpdateCurrentUserInfoRequest} [updateCurrentUserInfoRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCurrentUserInfo(authorization?: string, updateCurrentUserInfoRequest?: UpdateCurrentUserInfoRequest, options?: any): AxiosPromise<object> {
            return AuthWriteControllerApiFp(configuration).updateCurrentUserInfo(authorization, updateCurrentUserInfoRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary /admin/updateManuPermissions
         * @param {string} [authorization] 
         * @param {Array<string>} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateManuPermissions(authorization?: string, requestBody?: Array<string>, options?: any): AxiosPromise<object> {
            return AuthWriteControllerApiFp(configuration).updateManuPermissions(authorization, requestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary /admin/permission/update
         * @param {string} [authorization] 
         * @param {UpdatePermissionRequest} [updatePermissionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePermission(authorization?: string, updatePermissionRequest?: UpdatePermissionRequest, options?: any): AxiosPromise<object> {
            return AuthWriteControllerApiFp(configuration).updatePermission(authorization, updatePermissionRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary /admin/user/updatePermissionRoleRelation
         * @param {string} [authorization] 
         * @param {UpdatePermissionRoleRelationRequest} [updatePermissionRoleRelationRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePermissionRoleRelation(authorization?: string, updatePermissionRoleRelationRequest?: UpdatePermissionRoleRelationRequest, options?: any): AxiosPromise<object> {
            return AuthWriteControllerApiFp(configuration).updatePermissionRoleRelation(authorization, updatePermissionRoleRelationRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary /admin/role/update
         * @param {string} [authorization] 
         * @param {UpdateRoleRequest} [updateRoleRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRole(authorization?: string, updateRoleRequest?: UpdateRoleRequest, options?: any): AxiosPromise<object> {
            return AuthWriteControllerApiFp(configuration).updateRole(authorization, updateRoleRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary /admin/user/updateRolePermissionRelation
         * @param {string} [authorization] 
         * @param {UpdateRolePermissionRelationRequest} [updateRolePermissionRelationRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRolePermissionRelation(authorization?: string, updateRolePermissionRelationRequest?: UpdateRolePermissionRelationRequest, options?: any): AxiosPromise<object> {
            return AuthWriteControllerApiFp(configuration).updateRolePermissionRelation(authorization, updateRolePermissionRelationRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary /admin/user/updateRoleUserRelation
         * @param {string} [authorization] 
         * @param {UpdateRoleUserRelationRequest} [updateRoleUserRelationRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRoleUserRelation(authorization?: string, updateRoleUserRelationRequest?: UpdateRoleUserRelationRequest, options?: any): AxiosPromise<object> {
            return AuthWriteControllerApiFp(configuration).updateRoleUserRelation(authorization, updateRoleUserRelationRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary /admin/user/updateUserRoleRelation
         * @param {string} [authorization] 
         * @param {UpdateUserRoleRelationRequest} [updateUserRoleRelationRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserRoleRelation(authorization?: string, updateUserRoleRelationRequest?: UpdateUserRoleRelationRequest, options?: any): AxiosPromise<object> {
            return AuthWriteControllerApiFp(configuration).updateUserRoleRelation(authorization, updateUserRoleRelationRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthWriteControllerApi - object-oriented interface
 * @export
 * @class AuthWriteControllerApi
 * @extends {BaseAPI}
 */
export class AuthWriteControllerApi extends BaseAPI {
    /**
     * 
     * @summary /admin/user/changePassword
     * @param {string} [authorization] 
     * @param {ChangePassword} [changePassword] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthWriteControllerApi
     */
    public changePassword(authorization?: string, changePassword?: ChangePassword, options?: any) {
        return AuthWriteControllerApiFp(this.configuration).changePassword(authorization, changePassword, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary /admin/permission/create
     * @param {string} [authorization] 
     * @param {CreatePermissionRequest} [createPermissionRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthWriteControllerApi
     */
    public createPermission(authorization?: string, createPermissionRequest?: CreatePermissionRequest, options?: any) {
        return AuthWriteControllerApiFp(this.configuration).createPermission(authorization, createPermissionRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary /admin/role/create
     * @param {string} [authorization] 
     * @param {CreateRoleRequest} [createRoleRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthWriteControllerApi
     */
    public createRole(authorization?: string, createRoleRequest?: CreateRoleRequest, options?: any) {
        return AuthWriteControllerApiFp(this.configuration).createRole(authorization, createRoleRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary /admin/user/create
     * @param {string} [authorization] 
     * @param {CreateUserRequest} [createUserRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthWriteControllerApi
     */
    public createUser(authorization?: string, createUserRequest?: CreateUserRequest, options?: any) {
        return AuthWriteControllerApiFp(this.configuration).createUser(authorization, createUserRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary /admin/role/delete
     * @param {number} roleId 
     * @param {string} [authorization] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthWriteControllerApi
     */
    public deleteRole(roleId: number, authorization?: string, options?: any) {
        return AuthWriteControllerApiFp(this.configuration).deleteRole(roleId, authorization, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary /admin/login
     * @param {string} [authorization] 
     * @param {LoginRequest} [loginRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthWriteControllerApi
     */
    public login(authorization?: string, loginRequest?: LoginRequest, options?: any) {
        return AuthWriteControllerApiFp(this.configuration).login(authorization, loginRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary /admin/updateApiPermissions
     * @param {string} [authorization] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthWriteControllerApi
     */
    public updateApiPermissions(authorization?: string, options?: any) {
        return AuthWriteControllerApiFp(this.configuration).updateApiPermissions(authorization, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary /admin/user/updateCurrentUserInfo
     * @param {string} [authorization] 
     * @param {UpdateCurrentUserInfoRequest} [updateCurrentUserInfoRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthWriteControllerApi
     */
    public updateCurrentUserInfo(authorization?: string, updateCurrentUserInfoRequest?: UpdateCurrentUserInfoRequest, options?: any) {
        return AuthWriteControllerApiFp(this.configuration).updateCurrentUserInfo(authorization, updateCurrentUserInfoRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary /admin/updateManuPermissions
     * @param {string} [authorization] 
     * @param {Array<string>} [requestBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthWriteControllerApi
     */
    public updateManuPermissions(authorization?: string, requestBody?: Array<string>, options?: any) {
        return AuthWriteControllerApiFp(this.configuration).updateManuPermissions(authorization, requestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary /admin/permission/update
     * @param {string} [authorization] 
     * @param {UpdatePermissionRequest} [updatePermissionRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthWriteControllerApi
     */
    public updatePermission(authorization?: string, updatePermissionRequest?: UpdatePermissionRequest, options?: any) {
        return AuthWriteControllerApiFp(this.configuration).updatePermission(authorization, updatePermissionRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary /admin/user/updatePermissionRoleRelation
     * @param {string} [authorization] 
     * @param {UpdatePermissionRoleRelationRequest} [updatePermissionRoleRelationRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthWriteControllerApi
     */
    public updatePermissionRoleRelation(authorization?: string, updatePermissionRoleRelationRequest?: UpdatePermissionRoleRelationRequest, options?: any) {
        return AuthWriteControllerApiFp(this.configuration).updatePermissionRoleRelation(authorization, updatePermissionRoleRelationRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary /admin/role/update
     * @param {string} [authorization] 
     * @param {UpdateRoleRequest} [updateRoleRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthWriteControllerApi
     */
    public updateRole(authorization?: string, updateRoleRequest?: UpdateRoleRequest, options?: any) {
        return AuthWriteControllerApiFp(this.configuration).updateRole(authorization, updateRoleRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary /admin/user/updateRolePermissionRelation
     * @param {string} [authorization] 
     * @param {UpdateRolePermissionRelationRequest} [updateRolePermissionRelationRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthWriteControllerApi
     */
    public updateRolePermissionRelation(authorization?: string, updateRolePermissionRelationRequest?: UpdateRolePermissionRelationRequest, options?: any) {
        return AuthWriteControllerApiFp(this.configuration).updateRolePermissionRelation(authorization, updateRolePermissionRelationRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary /admin/user/updateRoleUserRelation
     * @param {string} [authorization] 
     * @param {UpdateRoleUserRelationRequest} [updateRoleUserRelationRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthWriteControllerApi
     */
    public updateRoleUserRelation(authorization?: string, updateRoleUserRelationRequest?: UpdateRoleUserRelationRequest, options?: any) {
        return AuthWriteControllerApiFp(this.configuration).updateRoleUserRelation(authorization, updateRoleUserRelationRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary /admin/user/updateUserRoleRelation
     * @param {string} [authorization] 
     * @param {UpdateUserRoleRelationRequest} [updateUserRoleRelationRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthWriteControllerApi
     */
    public updateUserRoleRelation(authorization?: string, updateUserRoleRelationRequest?: UpdateUserRoleRelationRequest, options?: any) {
        return AuthWriteControllerApiFp(this.configuration).updateUserRoleRelation(authorization, updateUserRoleRelationRequest, options).then((request) => request(this.axios, this.basePath));
    }

}


/**
 * CommonControllerApi - axios parameter creator
 * @export
 */
export const CommonControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary /common/qiniu/token
         * @param {string} [authorization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getToken: async (authorization?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/common/qiniu/token`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CommonControllerApi - functional programming interface
 * @export
 */
export const CommonControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary /common/qiniu/token
         * @param {string} [authorization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getToken(authorization?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await CommonControllerApiAxiosParamCreator(configuration).getToken(authorization, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * CommonControllerApi - factory interface
 * @export
 */
export const CommonControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary /common/qiniu/token
         * @param {string} [authorization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getToken(authorization?: string, options?: any): AxiosPromise<string> {
            return CommonControllerApiFp(configuration).getToken(authorization, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CommonControllerApi - object-oriented interface
 * @export
 * @class CommonControllerApi
 * @extends {BaseAPI}
 */
export class CommonControllerApi extends BaseAPI {
    /**
     * 
     * @summary /common/qiniu/token
     * @param {string} [authorization] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommonControllerApi
     */
    public getToken(authorization?: string, options?: any) {
        return CommonControllerApiFp(this.configuration).getToken(authorization, options).then((request) => request(this.axios, this.basePath));
    }

}


